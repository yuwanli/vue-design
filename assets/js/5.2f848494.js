(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{78:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),n("p",[t._v("在讲解 "),n("code",[t._v("initProps")]),t._v(" 函数的具体实现之前，我们需要回顾一下 "),n("code",[t._v("opts.props")]),t._v(" 的数据结构是什么样子的，在 "),n("router-link",{attrs:{to:"./4vue-normalize.html"}},[t._v("Vue 选项的规范化")]),t._v(" 一节中我们了解到 "),n("code",[t._v("props")]),t._v(" 选项是经过规范化处理的，并且规范后的数据是纯对象格式，假如我们像如下代码这样使用 "),n("code",[t._v("props")]),t._v(" 选项：")],1),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),n("p",[t._v("举个例子，如下是使用自定义组件并向组件传递数据的例子：")]),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),n("p",[t._v("再来看第三个常量：")]),t._m(34),t._m(35),t._m(36),t._m(37),t._m(38),n("p",[t._v("在这些常量的下面，是如下这段代码：")]),t._m(39),t._m(40),t._m(41),t._m(42),t._m(43),t._m(44),n("p",[t._v("再回到如下代码：")]),t._m(45),t._m(46),t._m(47),n("p",[t._v("在循环内的一开头是如下两句代码：")]),t._m(48),t._m(49),t._m(50),t._m(51),t._m(52),t._m(53),t._m(54),t._m(55),t._m(56),t._m(57),t._m(58),t._m(59),t._m(60),t._m(61),n("p",[t._v("最后大家还要注意一点，如下：")]),t._m(62),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),t._m(73),t._m(74),t._m(75),t._m(76),n("p",[t._v("上面代码中的 "),n("code",[t._v("hyphenate")]),t._v(" 和 "),n("code",[t._v("isReservedAttribute")]),t._v(" 还是都来自于 "),n("code",[t._v("src/shared/util.js")]),t._v(" 文件，可以在附录 "),n("router-link",{attrs:{to:"../appendix/shared-util.html"}},[t._v("shared/util.js 文件工具方法全解")]),t._v(" 中查看讲解。")],1),t._m(77),t._m(78),t._m(79),t._m(80),n("p",[t._v("在这一小节我们主要聚焦在如下这句代码：")]),t._m(81),t._m(82),t._m(83),n("p",[t._v("假如我们定义了如下组件：")]),t._m(84),n("p",[t._v("并像如下代码这样使用：")]),t._m(85),t._m(86),t._m(87),t._m(88),t._m(89),t._m(90)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"其他重要选项的初始化及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他重要选项的初始化及实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 其他重要选项的初始化及实现")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在前面的章节中，我们以 "),s("code",[this._v("initState")]),this._v(" 函数为切入点讲解了数据响应系统，又通过数据响应系统讲解了 "),s("code",[this._v("watch")]),this._v(" 和计算属性的实现，现在我们重新审视一下 "),s("code",[this._v("initState")]),this._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initState")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_watchers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" opts "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initProps")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initMethods")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("initData")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("observe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("/* asRootData */")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("computed"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initComputed")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("computed"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("watch "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("watch "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" nativeWatch"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("initWatch")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("watch"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上高亮的代码所示，到目前为止整个 "),s("code",[this._v("initState")]),this._v(" 函数中我们还剩下 "),s("code",[this._v("props")]),this._v(" 以及 "),s("code",[this._v("method")]),this._v(" 等选项的初始化和实现没有讲，接下来的内容我们将继续探索剩余选项的初始化及实现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"props-的初始化及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props-的初始化及实现","aria-hidden":"true"}},[this._v("#")]),this._v(" props 的初始化及实现")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"props-的初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props-的初始化","aria-hidden":"true"}},[this._v("#")]),this._v(" props 的初始化")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先我们要讲的是 "),s("code",[this._v("props")]),this._v(" 选项的初始化及实现，在 "),s("code",[this._v("initState")]),this._v(" 函数中可以看到如下这句代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initProps")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以发现，只有当 "),n("code",[t._v("opts.props")]),t._v(" 选项存在时才会调用 "),n("code",[t._v("initProps")]),t._v(" 函数进行初始化工作。"),n("code",[t._v("initProps")]),t._v(" 函数与其他选项的初始化函数类似，接收两个参数分别是组件实例对象 "),n("code",[t._v("vm")]),t._v(" 和选项 "),n("code",[t._v("opts.props")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("props"),s("span",{attrs:{class:"token punctuation"}},[this._v(":")]),this._v(" "),s("span",{attrs:{class:"token punctuation"}},[this._v("[")]),s("span",{attrs:{class:"token string"}},[this._v('"someData"')]),s("span",{attrs:{class:"token punctuation"}},[this._v("]")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么最终 "),s("code",[this._v("props")]),this._v(" 选项将会被规范化为：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  someData"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果我们像如下代码这样使用 "),s("code",[this._v("props")]),this._v(" 选项：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  someData1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("props")]),this._v(" 选项将被规范化为：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  someData1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总之在被规范化后的 "),s("code",[this._v("props")]),this._v(" 选项将会是一个对象，并且该对象每个属性的键名就是对应 "),s("code",[this._v("prop")]),this._v(" 的名字，而且每个属性的值都是一个至少会包含一个 "),s("code",[this._v("type")]),this._v(" 属性的对象。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("明白了这些我们就可以开始研究 "),s("code",[this._v("initProps")]),this._v(" 函数了，找到 "),s("code",[this._v("initProps")]),this._v(" 函数，该函数的开头定义了四个常量：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" propsData "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// cache prop keys so that future props updates can iterate using Array")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// instead of dynamic object key enumeration.")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_propKeys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isRoot "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先定义了 "),n("code",[t._v("propsData")]),t._v(" 常量，如果 "),n("code",[t._v("vm.$options.propsData")]),t._v(" 存在，则使用 "),n("code",[t._v("vm.$options.propsData")]),t._v(" 的值作为 "),n("code",[t._v("propsData")]),t._v(" 常量的值，否则 "),n("code",[t._v("propsData")]),t._v(" 常量的值为空对象。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("那么 "),n("code",[t._v("vm.$options.propsData")]),t._v(" 是什么呢？顾名思义 "),n("code",[t._v("propsData")]),t._v(" 就是 "),n("code",[t._v("props")]),t._v(" 数据，我们知道组件的 "),n("code",[t._v("props")]),t._v(" 代表接收来自外界传递进来的数据，这些数据总要存在某个地方，使得我们在组件内使用，而 "),n("code",[t._v("vm.$options.propsData")]),t._v(" 就是用来存储来自外界的组件数据的。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop1")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("1"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop2")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("2"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的代码中我们向自定义组件 "),s("code",[this._v("some-comp")]),this._v(" 传递了两个属性，注意此时组件并没有把这两个属性作为 "),s("code",[this._v("props")]),this._v(" 看待，但是如果自定义组件中显示声明了 "),s("code",[this._v("props")]),this._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'someCopm'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'prop1'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'prop2'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这时自定义组件 "),s("code",[this._v("some-comp")]),this._v(" 才会把外界传递进来的属性作为 "),s("code",[this._v("props")]),this._v(" 对待，并解析相应 "),s("code",[this._v("props")]),this._v(" 数据。如何解析呢？拿上面的例子来说，会从如下模板中：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop1")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("1"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop2")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("2"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("解析出两个 "),s("code",[this._v("props")]),this._v(" 的键值对，并生成一个对象：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'1'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  prop2"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'2'")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上这个对象就是 "),s("code",[this._v("vm.$options.propsData")]),this._v(" 的值：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'1'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  prop2"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'2'")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上说明只是为了让大家明白 "),s("code",[this._v("propsData")]),this._v(" 的作用和来历，有很多不严谨的地方，但足够让大家理解。更具体的内容我们会在编译器和子组件的创建相关章节中为大家详细说明。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这样我们就明白了第一个常量 "),s("code",[this._v("propsData")]),this._v(" 的作用，它存储着外界传递进来的 "),s("code",[this._v("props")]),this._v(" 的值。接着我们看一下第二个常量：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("定义了 "),n("code",[t._v("props")]),t._v(" 常量和 "),n("code",[t._v("vm._props")]),t._v(" 属性，它和 "),n("code",[t._v("vm._props")]),t._v(" 属性具有相同的引用并且初始值为空对象："),n("code",[t._v("{}")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_propKeys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("定义了常量 "),n("code",[t._v("keys")]),t._v("，同时在 "),n("code",[t._v("vm.options")]),t._v(" 上添加 "),n("code",[t._v("_propKeys")]),t._v(" 属性，并且常量 "),n("code",[t._v("keys")]),t._v(" 与 "),n("code",[t._v("vm.$options._propKeys")]),t._v(" 属性具有相同的引用，且初始值是一个空数组："),n("code",[t._v("[]")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后一个常量为 "),s("code",[this._v("isRoot")]),this._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isRoot "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("isRoot")]),this._v(" 常量用来标识是否是根组件，因为根组件实例的 "),s("code",[this._v("$parent")]),this._v(" 属性的值是不存在的，所以当 "),s("code",[this._v("vm.$parent")]),this._v(" 为假时说明当前组件实例时根组件。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isRoot"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" propsOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码的重点在 "),n("code",[t._v("for...in")]),t._v(" 循环语句块内，为了结构清晰如上代码中我们省略了 "),n("code",[t._v("for...in")]),t._v(" 循环语句块内的代码。可以看到在 "),n("code",[t._v("for...in")]),t._v(" 循环执行之前执行一段 "),n("code",[t._v("if")]),t._v(" 条件语句块：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isRoot"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("只要当前组件实例不是根节点，那么该 "),n("code",[t._v("if")]),t._v(" 语句块内的代码将会被执行，即调用 "),n("code",[t._v("toggleObserving")]),t._v(" 函数并传递 "),n("code",[t._v("false")]),t._v(" 作为参数。另外我们也可以发现，在 "),n("code",[t._v("for...in")]),t._v(" 循环之后再次调用了 "),n("code",[t._v("toggleObserving")]),t._v(" 函数，只不过这一次所传递的参数是 "),n("code",[t._v("true")]),t._v("。我们前面遇到过 "),n("code",[t._v("toggleObserving")]),t._v(" 函数，我们知道这个函数的作用类似一个开关，它会修改 "),n("code",[t._v("src/core/observer/index.js")]),t._v(" 文件中 "),n("code",[t._v("shouldObserve")]),t._v(" 变量的值。并且我们注意到 "),n("code",[t._v("observe")]),t._v(" 函数中的这段代码，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("observe")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" asRootData"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("boolean"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Observer "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'__ob__'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__ "),n("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Observer")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ob "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("    shouldObserve "),n("span",{attrs:{class:"token operator"}},[t._v("&&")])]),t._v("    "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token function"}},[t._v("isServerRendering")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isPlainObject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isExtensible")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isVue\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ob "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Observer")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ob\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这意味着当你调用 "),n("code",[t._v("observe")]),t._v(" 函数去观测一个数据对象时，只有当变量 "),n("code",[t._v("shouldObserve")]),t._v(" 为真的时候才会进行观测。所以我们才说 "),n("code",[t._v("toggleObserving")]),t._v(" 函数是一个开关，因为它能修改 "),n("code",[t._v("shouldObserve")]),t._v(" 变量的值。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isRoot"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" propsOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为什么这里在 "),s("code",[this._v("for...in")]),this._v(" 循环之前“关闭开关”，在循环结束之后又“打开开关”呢？这么做肯定是有原因的，不过我们需要先弄清楚 "),s("code",[this._v("for...in")]),this._v(" 循环语句块内做了什么事情才行，接下来我们开始研究这个 "),s("code",[this._v("for...in")]),this._v(" 循环。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先该 "),n("code",[t._v("for...in")]),t._v(" 循环所遍历的对象是 "),n("code",[t._v("propsOptions")]),t._v("，它就是 "),n("code",[t._v("props")]),t._v(" 选项参数，我们前面分析了它的格式，所以 "),n("code",[t._v("for...in")]),t._v(" 循环中的 "),n("code",[t._v("key")]),t._v(" 就是每个 "),n("code",[t._v("prop")]),t._v(" 的名字。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("keys"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("validateProp")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propsOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先将 "),n("code",[t._v("prop")]),t._v(" 的名字("),n("code",[t._v("key")]),t._v(")添加到 "),n("code",[t._v("keys")]),t._v(" 数组中，我们知道常量 "),n("code",[t._v("keys")]),t._v(" 与 "),n("code",[t._v("vm.$options._propKeys")]),t._v(" 属性具有相同的引用，所以这等价于将 "),n("code",[t._v("key")]),t._v(" 添加到 "),n("code",[t._v("vm.$options._propKeys")]),t._v(" 属性中，至于为什么添加到 "),n("code",[t._v("vm.$options._propKeys")]),t._v(" 属性，我们会在后面讲到。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接着定义了 "),n("code",[t._v("value")]),t._v(" 常量，该常量的值为 "),n("code",[t._v("validateProp")]),t._v(" 函数的返回值。一句话概括 "),n("code",[t._v("validateProp")]),t._v(" 函数的作用：用来校验名字给定的 "),n("code",[t._v("prop")]),t._v(" 数据是否符合预期的类型，并返回相应 "),n("code",[t._v("prop")]),t._v(" 的值(或默认值)。至于 "),n("code",[t._v("validateProp")]),t._v(" 函数的具体实现我们放到后面讲，现在大家只需要知道 "),n("code",[t._v("validateProp")]),t._v(" 函数会返回给定名字的 "),n("code",[t._v("prop")]),t._v(" 的值即可，也就是说常量 "),n("code",[t._v("value")]),t._v(" 中保存着 "),n("code",[t._v("prop")]),t._v(" 的值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着是一个 "),s("code",[this._v("if...else")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hyphenatedKey "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hyphenate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttribute")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      config"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttr")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`"')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" is a reserved attribute and cannot be used as component prop.`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isUpdatingChildComponent"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Avoid mutating a prop directly since the value will be `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`overwritten whenever the parent component re-renders. `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Instead, use a data or computed property based on the prop's `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`value. Prop being mutated: "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('"`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        vm\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在非生产环境下 "),n("code",[t._v("if")]),t._v(" 语句块的代码将被执行，反之 "),n("code",[t._v("else")]),t._v(" 语句块内的代码将被执行，前面我们说过，无论是生产环境还是非生产环境，应该保证行为一致才是最关键的一点。在如上代码中虽然 "),n("code",[t._v("if")]),t._v(" 语句块内的代码很多，而 "),n("code",[t._v("else")]),t._v(" 语句块只有一句代码，但其实他们的行为是一致的，之所以 "),n("code",[t._v("if")]),t._v(" 语句块的代码会比较多，那是因为在非生产环境下要做很多打印警告信息使开发更加友好的工作。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以如上 "),s("code",[this._v("if...else")]),this._v(" 语句块最终的目的可以用一句代码来代替，即：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("使用 "),n("code",[t._v("defineReactive")]),t._v(" 函数将 "),n("code",[t._v("prop")]),t._v(" 定义到常量 "),n("code",[t._v("props")]),t._v(" 上，我们知道 "),n("code",[t._v("props")]),t._v(" 常量与 "),n("code",[t._v("vm._props")]),t._v(" 属性具有相同的引用，所以这等价于在 "),n("code",[t._v("vm._props")]),t._v(" 上定义了 "),n("code",[t._v("prop")]),t._v(" 数据。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("同时大家注意 "),s("code",[this._v("defineReactive")]),this._v(" 函数的调用被 "),s("code",[this._v("toggleObserving")]),this._v(" 函数的调用所包围，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isRoot"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" propsOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("    "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了搞清楚其目的，我们需要找到 "),s("code",[this._v("defineReactive")]),this._v(" 函数，注意如下高亮的代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  obj"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  val"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  customSetter"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shallow"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" childOb "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("shallow "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("observe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    enumerable"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    configurable"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("get")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("reactiveGetter")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("set")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("reactiveSetter")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如上那句高亮的代码所示，在使用 "),n("code",[t._v("defineReactive")]),t._v(" 函数定义属性时，会调用 "),n("code",[t._v("observe")]),t._v(" 函数对值继续进行观测。但由于之前使用了 "),n("code",[t._v("toggleObserving(false)")]),t._v(" 函数关闭了开关，所以上面高亮代码中调用 "),n("code",[t._v("observe")]),t._v(" 函数是一个无效调用。所以我们可以得出一个结论："),n("strong",[t._v("在定义 "),n("code",[t._v("props")]),t._v(" 数据时，不将 "),n("code",[t._v("prop")]),t._v(" 值转换为响应式数据")]),t._v("，这里要注意的是："),n("strong",[t._v("由于 "),n("code",[t._v("props")]),t._v(" 本身是通过 "),n("code",[t._v("defineReactive")]),t._v(" 定义的，所以 "),n("code",[t._v("props")]),t._v(" 本身是响应式的，但没有对值进行深度定义")]),t._v("。为什么这样做呢？很简单，我们知道 "),n("code",[t._v("props")]),t._v(" 是来自外界的数据，或者更具体一点的说，"),n("code",[t._v("props")]),t._v(" 是来自父组件的数据，这个数据如果是一个对象(包括纯对象和数组)，那么它本身可能已经是响应式的了，所以不再需要重复定义。另外在定义 "),n("code",[t._v("props")]),t._v(" 数据之后，又调用 "),n("code",[t._v("toggleObserving(true)")]),t._v(" 函数将开关开启，这么做的目的是不影响后续代码的功能，因为这个开关是全局的。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isRoot"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码说明，只有当不是根组件的时候才会关闭开关，这说明如果当前组件实例是根组件的话，那么定义的 "),s("code",[this._v("props")]),this._v(" 的值也会被定义为响应式数据。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("通过以上内容的讲解，我们应该知道的是 "),n("code",[t._v("props")]),t._v(" 本质上与 "),n("code",[t._v("data")]),t._v(" 是相同的，区别就在于二者数据来源不同，其中 "),n("code",[t._v("data")]),t._v(" 数据定义的组件自身，我们称其为本地数据，而 "),n("code",[t._v("props")]),t._v(" 数据来自于外界。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外我们还有一段代码没有讲解，就是 "),s("code",[this._v("for...in")]),this._v(" 循环的最后一段代码，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("proxy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`_props`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在讲解 "),s("code",[this._v("data")]),this._v(" 选项初始化的时候我们见过类似的代码，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("proxy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`_data`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("所以这么做的目的就是在组件实例对象上第一与 "),n("code",[t._v("props")]),t._v(" 同名的属性，使得我们能够通过组件实例对象直接访问 "),n("code",[t._v("props")]),t._v(" 数据，但其最终代理的值仍然是 "),n("code",[t._v("vm._props")]),t._v(" 对象下定义的 "),n("code",[t._v("props")]),t._v(" 数据。另外我们要注意这里 "),n("code",[t._v("if")]),t._v(" 语句条件：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"highlighted-line"}},[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("  "),n("span",{attrs:{class:"token function"}},[t._v("proxy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`_props`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("只有当 "),n("code",[t._v("key")]),t._v(" 不在组件实例对象上以及其原型链上有定义时才会进行代理，这是一个针对子组件的优化操作，对于子组件来讲这个代理工作在创建子组件构造函数时就完成了，即在 "),n("code",[t._v("Vue.extend")]),t._v(" 函数中完成的，这么做的目的是避免每次创建子组件实例时都会调用 "),n("code",[t._v("proxy")]),t._v(" 函数去做代理，由于 "),n("code",[t._v("proxy")]),t._v(" 函数中使用了 "),n("code",[t._v("Object.defineProperty")]),t._v(" 函数，该函数的性能表现不佳，所以这么做能够提升一定的性能指标。更多这部分的详细信息我们会在后面讲解 "),n("code",[t._v("Vue.extend")]),t._v(" 函数及相关子组件创建时间的时候为大家详细说明。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后我们再来看一下初始化 "),s("code",[this._v("props")]),this._v(" 部分打印警告信息相关的内容，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hyphenatedKey "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hyphenate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttribute")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      config"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttr")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`"')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" is a reserved attribute and cannot be used as component prop.`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isUpdatingChildComponent"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Avoid mutating a prop directly since the value will be `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`overwritten whenever the parent component re-renders. `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Instead, use a data or computed property based on the prop's `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`value. Prop being mutated: "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('"`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        vm\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在非生产环境下会执行 "),s("code",[this._v("if")]),this._v(" 语句块的代码，首先执行的如下这段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hyphenatedKey "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hyphenate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttribute")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n    config"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttr")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`"')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" is a reserved attribute and cannot be used as component prop.`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    vm\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先使用 "),n("code",[t._v("hyphenate")]),t._v(" 将 "),n("code",[t._v("prop")]),t._v(" 的名字转为连字符加小写的形式，并将转换后的值赋值给 "),n("code",[t._v("hyphenatedKey")]),t._v(" 常量，紧接着又是一个 "),n("code",[t._v("if")]),t._v(" 条件语句块，其条件是在判断 "),n("code",[t._v("prop")]),t._v(" 的名字是否是保留的属性("),n("code",[t._v("attribute")]),t._v(")，如果是则会打印警告信息，警告你不能使用保留的属性("),n("code",[t._v("attribute")]),t._v(")名作为 "),n("code",[t._v("prop")]),t._v(" 的名字。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着使用了 "),s("code",[this._v("defineReactive")]),this._v(" 函数定义 "),s("code",[this._v("props")]),this._v(" 数据：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isUpdatingChildComponent"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Avoid mutating a prop directly since the value will be `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`overwritten whenever the parent component re-renders. `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Instead, use a data or computed property based on the prop's `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`value. Prop being mutated: "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('"`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以看到与生产环境不同的是，在调用 "),n("code",[t._v("defineReactive")]),t._v(" 函数时多传递了第四个参数，我们知道 "),n("code",[t._v("defineReactive")]),t._v(" 函数的第三个参数是 "),n("code",[t._v("customSetter")]),t._v("，即自定义的 "),n("code",[t._v("setter")]),t._v("，这个 "),n("code",[t._v("setter")]),t._v(" 会在你尝试修改 "),n("code",[t._v("props")]),t._v(" 数据时触发，并打印警告信息提示你不要直接修改 "),n("code",[t._v("props")]),t._v(" 数据。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"props-的校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props-的校验","aria-hidden":"true"}},[this._v("#")]),this._v(" props 的校验")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("validateProp")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propsOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("也就是 "),n("code",[t._v("props")]),t._v(" 的校验，和一些其他工作，比如获取默认值等。如上这句代码是在 "),n("code",[t._v("initProps")]),t._v(" 函数体内的 "),n("code",[t._v("for...in")]),t._v(" 循环语句，传递给 "),n("code",[t._v("validateProp")]),t._v(" 函数的四个参数分别是：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[n("code",[t._v("key")]),t._v("："),n("code",[t._v("prop")]),t._v(" 的名字")]),n("li",[n("code",[t._v("propsOptions")]),t._v("：整个 "),n("code",[t._v("props")]),t._v(" 选项对象")]),n("li",[n("code",[t._v("propsData")]),t._v("：整个 "),n("code",[t._v("props")]),t._v(" 数据来源对象")]),n("li",[n("code",[t._v("vm")]),t._v("：组件实例对象")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'someComp'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop1")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("validateProp")]),this._v(" 函数接收的四个参数将会是：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// props 的名字")]),t._v("\nkey "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'prop1'")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// props 选项参数")]),t._v("\npropOptions "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// props 数据")]),t._v("\npropsData "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'str'")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 组件实例对象")]),t._v("\nvm "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"methods-选项的初始化及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods-选项的初始化及实现","aria-hidden":"true"}},[this._v("#")]),this._v(" methods 选项的初始化及实现")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"provide-选项的初始化及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#provide-选项的初始化及实现","aria-hidden":"true"}},[this._v("#")]),this._v(" provide 选项的初始化及实现")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"inject-选项的初始化及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inject-选项的初始化及实现","aria-hidden":"true"}},[this._v("#")]),this._v(" inject 选项的初始化及实现")])}],!1,null,null,null);s.default=e.exports}}]);